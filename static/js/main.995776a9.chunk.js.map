{"version":3,"sources":["components/Comments/Comments.module.scss","components/Comments/Comments.js","App.js","serviceWorker.js","index.js","App.module.scss"],"names":["module","exports","Comments","state","commentInfo","currentCommentInfo","JSON","parse","localStorage","getItem","this","setState","id","type","console","log","index","findIndex","x","commentId","upvotesUpdated","upvotes","downvotesUpdated","downvotes","itemAttributes","slice","Object","assign","storeData","setItem","stringify","comments","map","comment","key","className","classes","onClick","updateVotes","props","length","React","Component","App","inputvalue","textInput","createRef","updatedCommentInfo","commentAdded","current","value","push","addToStorage","event","target","placeholder","ref","onChange","e","changeHandler","addCommentHandler","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.995776a9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"commentBox\":\"Comments_commentBox__1tff_\",\"comment\":\"Comments_comment__22mGE\",\"votes\":\"Comments_votes__fowbG\",\"like\":\"Comments_like__27bqU\",\"dislike\":\"Comments_dislike__3xu0i\"};","import React from 'react';\r\nimport * as classes from './Comments.module.scss';\r\n\r\nexport default class Comments extends React.Component {\r\n\tstate={\r\n\t\tcommentInfo:[]\r\n\t}\r\n\tcomponentDidMount(){\r\n\t\t// this.storeData();\r\n\t\tlet currentCommentInfo= JSON.parse(localStorage.getItem('commentInfo'));\r\n\t\tif(currentCommentInfo){\r\n\t\t\tthis.setState({\r\n\t\t\t\tcommentInfo: currentCommentInfo\r\n\t\t\t});\r\n\t\t}\t\r\n\t}\r\n\tstatic getDerivedStateFromProps(props, state) {\r\n\t    if (props.comments.length !== state.commentInfo.length) {\r\n\t      return {\r\n\t        commentInfo: props.comments\r\n\t      };\r\n\t    }\r\n\t    return null;\r\n\t  }\r\n\tupdateVotes(id,type){\r\n\t\tconsole.log(id);\r\n\t\tvar index = this.state.commentInfo.findIndex( x => x.commentId === id);\r\n\t\tlet upvotesUpdated= this.state.commentInfo[index].upvotes;\r\n\t\tlet downvotesUpdated= this.state.commentInfo[index].downvotes;\r\n\t\tif(index>=0){\r\n\t\t\tlet itemAttributes= {};\r\n\t\t\tif(type === 'upvote'){\r\n\t\t\t\titemAttributes= {\r\n\t\t\t\tcommentId: id, upvotes: upvotesUpdated+1, downvotes: downvotesUpdated\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\titemAttributes= {\r\n\t\t\t\tcommentId: id, upvotes: upvotesUpdated, downvotes: downvotesUpdated+1\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.setState({\r\n\t\t      commentInfo: [\r\n\t\t         ...this.state.commentInfo.slice(0,index),\r\n\t\t         Object.assign({}, this.state.commentInfo[index], itemAttributes),\r\n\t\t         ...this.state.commentInfo.slice(index+1)\r\n\t\t      ]\r\n\t\t    },()=>this.storeData());\t\r\n\t\t}\r\n\t}\r\n\tstoreData(){\r\n\t\tconsole.log(\"store data\",this.state.commentInfo)\r\n\t\tlocalStorage.setItem('commentInfo',JSON.stringify(this.state.commentInfo));\r\n\t}\r\n\trender() {\r\n\t\tconst comments=(\r\n\t\t\tthis.state.commentInfo.map(comment =>(\r\n\t\t\t\t<div key={comment.commentId} className={classes.comment}>\r\n\t\t\t\t\t<li>\r\n\t\t\t\t\t\t{comment.comment}\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<div className={classes.votes}>\r\n\t\t\t\t\t\t<span className={classes.like}\r\n\t\t\t\t\t\t\tonClick={()=> this.updateVotes(comment.commentId,'upvote')}>\r\n\t\t\t\t\t\t\t{comment.upvotes}\r\n\t\t\t\t\t\t\t<i className=\"far fa-thumbs-up\"></i>\r\n\t\t\t\t\t\t</span> &nbsp;\r\n\t\t\t\t\t\t<span className={classes.dislike}\r\n\t\t\t\t\t\t\tonClick={()=> this.updateVotes(comment.commentId,'downvote')}>\r\n\t\t\t\t\t\t\t{comment.downvotes}<i className=\"far fa-thumbs-down\"></i></span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t))\r\n\t\t\t);\r\n\t\treturn (\r\n\t\t\t<div className={classes.commentBox}>\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t{comments}\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import React from 'react';\nimport * as classes from './App.module.scss';\nimport Comments from './components/Comments/Comments';\n\nexport default class App extends React.Component {\n\tstate={\n\t\tcommentInfo:[\n\t\t\t{\n\t\t\t\tcommentId:0,\n\t\t\t\tcomment:'a fake comment.',\n\t\t\t\tupvotes:0,\n\t\t\t\tdownvotes:0\n\t\t\t},\n\t\t\t{\n\t\t\t\tcommentId:1,\n\t\t\t\tcomment:'a fake comment-1.',\n\t\t\t\tupvotes:0,\n\t\t\t\tdownvotes:0\n\t\t\t},\n\t\t\t{\n\t\t\t\tcommentId:2,\n\t\t\t\tcomment:'a fake comment-2.',\n\t\t\t\tupvotes:0,\n\t\t\t\tdownvotes:0\n\t\t\t}\n\t\t],\n\t\tinputvalue:''\n\t}\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.textInput = React.createRef();\n\t}\n\tcomponentDidMount(){\n\t\t// this.storeData();\n\t\tlet currentCommentInfo= JSON.parse(localStorage.getItem('commentInfo'));\n\t\tif(currentCommentInfo){\n\t\t\tthis.setState({\n\t\t\t\tcommentInfo: currentCommentInfo \n\t\t\t});\n\t\t}\t\n\t}\n\taddCommentHandler(){\n\t\tlet updatedCommentInfo=[...this.state.commentInfo];\n\t\tlet lastId= this.state.commentInfo.length;\n\t\tconst commentAdded= {\n\t\t\tcommentId: lastId+1,\n\t\t\tcomment: this.textInput.current.value,\n\t\t\tupvotes:0,\n\t\t\tdownvotes:0\n\t\t}\n\t\tupdatedCommentInfo.push(commentAdded);\n\t\tconsole.log(updatedCommentInfo)\n\t\tthis.setState({\n\t\t\tcommentInfo: [...updatedCommentInfo],\n\t\t\tinputvalue: ''\n\t\t}, ()=>this.addToStorage());\n\t}\n\taddToStorage(){\n\t\tconsole.log(this.state.commentInfo)\n\t\tlocalStorage.setItem('commentInfo',JSON.stringify(this.state.commentInfo));\n\t}\n\tchangeHandler(event){\n\t\tthis.setState({\n\t\t\tinputvalue: event.target.value \n\t\t});\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<div className={classes.App}>\n\t\t\t\t<div className={`col-md-12 ${classes.inputBox}`}>\n\t\t\t\t<input type=\"text\" className={classes.Input} placeholder=\"Type a Comment\"\n\t\t\t\t\tref={this.textInput} value={this.state.inputvalue}\n\t\t\t\t\tonChange={(e)=>this.changeHandler(e)}/>\n\t\t\t\t<button onClick={()=>this.addCommentHandler()}>Add Comment</button>\n\t\t\t\t</div>\n\t\t\t\t<Comments comments={this.state.commentInfo}/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport'bootstrap/dist/css/bootstrap.min.css';\nimport'bootstrap/dist/js/bootstrap.bundle.min';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__6-9BA\",\"Input\":\"App_Input__35AnA\",\"inputBox\":\"App_inputBox__17PmM\"};"],"sourceRoot":""}